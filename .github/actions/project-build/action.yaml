name: 'Project Build'
description:  'Builds OpenMod projects'
inputs:
  project_path:
    description: 'Path to project folder'
    required: true
  nuget_push:
    description: 'Push to Nuget on release?'
    required: false
    default: false  
  nuget_key: 
    description: 'NuGet deploy key'
    required: false
  github_token:
    description: 'GitHub token'
    required: false
outputs:
  version:
    description: "Generated version (SemVersion compatible)"
    value: ${{ steps.get-version.outputs.version }}
  is_prerelease:
    description: 'Gets if the version is a prerelease' 
    value: ${{ steps.check-prerelease.outputs.is_prerelease }}   
runs:
  using: "composite"
  steps:
    # Generate semver compatible version from current tag and commit hash
    - name: Create version
      id: get-version
      run: echo ::set-output name=version::$(git describe --tags)+$(git rev-parse --short HEAD)
      shell: bash

    - name: Check Prerelease
      id: check-prerelease
      run: "if [[ ${{ steps.get-version.outputs.version }} =~ - ]]; then
              echo ::set-output name=is_prerelease::true; 
            else 
              echo ::set-output name=is_prerelease::false; 
            fi"
      shell: bash

    # Install dependencies (this needs to be a separate step from build for caching)
    - name: Install dependencies
      run: dotnet restore ${{ inputs.project_path }}
      shell: bash
    
    # Update project versions
    - name: Update version
      run: "sed -i \"s#<Version>0.0.0</Version>#<Version>${{ steps.get-version.outputs.version }}</Version>#\" props/SharedProjectProps.props"
      shell: bash
    - name: Update package version
      run: "sed -i \"s#<PackageVersion>0.0.0</PackageVersion>#<PackageVersion>${{ steps.get-version.outputs.version }}</PackageVersion>#\" props/SharedProjectProps.props"     
      shell: bash
    - name: Update informational version
      run: "sed -i \"s#<InformationalVersion>0.0.0</InformationalVersion>#<InformationalVersion>${{ steps.get-version.outputs.version }}</InformationalVersion>#\" props/SharedProjectProps.props"            
      shell: bash

    # Build project
    - name: Build
      run: dotnet build ${{ inputs.project_path }} --configuration Release --no-restore
      shell: bash

    # Push to GitHub packages on each commit  
    - name: Push to NuGet (Nightly)
      if: inputs.github_token > 0 && inputs.nuget_push == 'true' && (github.event_name == 'push' || github.event_name == 'create' && github.event.ref_type == 'tag')
      run: dotnet nuget push ${{ inputs.project_path }}/bin/Release/*.nupkg --api-key ${{ inputs.github_token }} --skip-duplicate --source https://nuget.pkg.github.com/openmod/index.json;
      shell: bash

    # Push to NuGet on each tag, but only if the tag is not a pre-release version         
    - name: Push to NuGet (Release)
      if: inputs.nuget_key > 0 && inputs.nuget_push == 'true' && github.event_name == 'create' && github.event.ref_type == 'tag' && steps.check-prerelease.outputs.is_prerelease == 'false'
      run: dotnet nuget push ${{ inputs.project_path }}/bin/Release/*.nupkg --api-key ${{ inputs.nuget_key }} --skip-duplicate --source https://api.nuget.org/v3/index.json;
      shell: bash
